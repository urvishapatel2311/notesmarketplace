@model IPagedList<NotesMarketPlace.Models.ViewModel>
@using PagedList
@using PagedList.Mvc
@{
    Layout = "~/Views/Shared/_AdminAfterLoginLayout.cshtml";
    int rowNo = 0;
    ViewBag.Title = "Published Note";
}


<!-- My Published Notes -->
<section id="publishednote" class="fixheight">
    <div class="content-box-md">
        <div class="container">
            <!-- General heading -->
            <div class="row buy">
                <div class="col-md-12">
                    <div class="com-heading">
                        <h3>Published Notes</h3>
                    </div>
                </div>
                <div class="col-md-12 rejlabl">
                    <label>Seller</label>
                </div>
                @{
                    NotesMarketPlace.Models.notesmarketplaceEntities3 db = new NotesMarketPlace.Models.notesmarketplaceEntities3();
                }
                <div class="col-md-2">
                    <div class="form-group ddg">
                        <select class="dropdown-icon form-control" id="ddg" name="sellername" onchange="location.href=this.value">
                            @{
                                <option value="@Url.Action("publishedNote","admin", new { sellername=""})" disabled selected>Select Seller</option>
                                List<String> sellernames = db.tblUsers.Select(m => m.firstName).Distinct().ToList();
                            }
                            @foreach (String sellername in sellernames)
                            {
                                if (sellername != null)
                                {
                                    if (sellername.Equals(Request.QueryString["sellername"]))
                                    {
                                        <option selected value="@Url.Action("publishedNote","admin", new { sellername=sellername.ToString()})">@sellername</option>
                                        continue;
                                    }
                                }
                                <option value="@Url.Action("publishedNote","admin", new { sellername=sellername.ToString()})">@sellername</option>

                            }
                        </select>
                    </div>
                </div>
                <div class="col-md-10">
                    <form>
                        <div class="search-box buy2  has-search">
                            @Html.TextBox("searchTxt", null, new { @class = "form-control search-icon", @id = "search2", @placeholder = "Search" })
                            <input name="sellername" hidden value="@Request.QueryString["sellername"]" />
                            <button id="btn-buy" type="submit" class="btn btn-primary btn-block">Search</button>
                        </div>
                    </form>
                </div>
            </div>
            @ViewBag.record
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Sr No.</th>
                            <th scope="col">@Html.ActionLink("Note Title", "publishedNote", new { SortOrder = ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc"), SortBy = "Note Title" })</th>
                            <th scope="col">@Html.ActionLink("Category", "publishedNote", new { SortOrder = ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc"), SortBy = "Category" })</th>
                            <th scope="col">@Html.ActionLink("Sell Type", "publishedNote", new { SortOrder = ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc"), SortBy = "Sell Type" })</th>
                            <th scope="col">@Html.ActionLink("Price", "publishedNote", new { SortOrder = ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc"), SortBy = "Price" })</th>
                            <th scope="col">@Html.ActionLink("Seller", "publishedNote", new { SortOrder = ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder == "Asc" ? "Desc" : "Asc"), SortBy = "Seller" })</th>
                            <th scope="col"></th>
                            <th scope="col">Published Date</th>
                            <th scope="col">Approved By</th>
                            <th scope="col">Number of<br>Downloads</th>
                            <th scope="col"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Count() == 0)
                        {
                            <tr> <td colspan="11" class="align-middle"> Records not found </td></tr>
                        }
                        @foreach (NotesMarketPlace.Models.ViewModel item in (IEnumerable<NotesMarketPlace.Models.ViewModel>)ViewData.Model)
                        {
                            //var d = db.tblDownloads.Where(m => m.noteID == item.noteViewModel.id);
                            int noOfDownloads = 0;
                            noOfDownloads = db.tblDownloads.Where(m => m.noteID == item.noteViewModel.id && m.isAttachmentDownloaded).Count();
                            <tr>
                                <th scope="row">@(rowNo += 1)</th>
                                <td><a href="/user/NoteDetails?id=@item.noteViewModel.id">@item.noteViewModel.noteTitle</a></td>
                                <td>@item.categoryViewModel.categoryName</td>
                                @if (item.noteViewModel.isPaid)
                                {
                                    <td> Paid </td>
                                }
                                else
                                {
                                    <td> Free </td>

                                }
                                <td>$@item.noteViewModel.sellingPrice</td>
                                <td>@item.userViewModel.firstName @item.userViewModel.lastName</td>
                                <td><a href="/admin/memberDetails?id=@item.userViewModel.id"><img src="~/Content/images/icon-image/eye.png" class="eye-img"></a></td>
                                <td>@item.noteViewModel.publishedDate</td>
                                <td>@item.noteViewModel.tblUser.firstName @item.noteViewModel.tblUser.lastName</td>
                                <td><a href="/admin/downloadedNote?bookid=@item.noteViewModel.id">@noOfDownloads</a></td>
                                <td>
                                    <div class="dropdown">
                                        <a class="nav-link" href="#" id="three-dot-button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span><img src="~/Content/images/icon-image/dots.png" alt="Dots-Menu"></span></a>
                                        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                            <li><a class="dropdown-item" href="/user/DownloadBookfromMyWindow?bookId=@item.noteViewModel.id">Download Notes</a></li>
                                            <li><a class="dropdown-item" href="/admin/NoteDetails?id=@item.noteViewModel.id">View More Details</a></li>
                                            <li><a class="dropdown-item" href="#" onclick="onUnpublish(@item.noteViewModel.id, '@item.noteViewModel.noteTitle','@item.userViewModel.emailID')">Unpublish</a></li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>

                        }

                    </tbody>
                </table>
                <script>
                    function onUnpublish(id, title, email) {
                        document.getElementById("UnpublishForId").value = id;
                        document.getElementById("sellerEmailID").value = email;
                        document.getElementById("noteDetails").innerHTML = title;
                        $('#exampleModalLong2').modal('show');
                    }
                </script>
                <!-- modal for Unpublish note -->
                <div class="modal fade feedbackDetails" id="exampleModalLong2" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog" role="document">

                        @using (Html.BeginForm("publishedNote", "admin", FormMethod.Post, new { }))
                        {

                            <div class="review-modal modal-content">
                                <div class="modal-body">
                                    <div class="popup-head ">
                                        <h5 class="modal-title" id="exampleModalLongTitle">
                                            Are you sure you want to Unpublish this note?
                                        </h5>
                                    </div>
                                    <div class="reportin general-heading" id="exampleModalLabel">
                                        <h3 id="noteDetails"></h3>
                                    </div>
                                    <input type="hidden" name="UnpublishForId" id="UnpublishForId" />
                                    <input type="hidden" name="sellerEmail" id="sellerEmailID" />
                                    <div class="form-group">
                                        @Html.Label("remarks", "Remarks")
                                        <textarea type="text" rows="3" class="form-control" placeholder="Write Remarks" name="adminComment" required></textarea>
                                    </div>
                                    <button type="submit" id="popup-btn" class="btn-note-reject " value="unpublish" name="command">Unpublish</button>
                                    <button type="submit" id="btnCancel" class=" btn btn-primary " data-dismiss="modal">Cancel</button>
                                </div>

                            </div>}
                    </div>
                </div>
                <!-- End of modal for Unpublish note -->
            </div>
        </div>
        <div class="pagination-container">
            @Html.PagedListPager(Model, pageindex => Url.Action("publishedNote", "admin", new { pageindex, search = Request.QueryString["searchTxt"] }), new PagedList.Mvc.PagedListRenderOptions
           {
               ContainerDivClasses = null,
               LiElementClasses = new string[] { "pgno" },
               UlElementClasses = new string[] { "pagination" },
               LinkToPreviousPageFormat = "<",
               LinkToNextPageFormat = ">",
               MaximumPageNumbersToDisplay = 5,
               DisplayEllipsesWhenNotShowingAllPageNumbers = false,
               DisplayLinkToFirstPage = PagedListDisplayMode.Never,
               DisplayLinkToLastPage = PagedListDisplayMode.Never
           })
        </div>

    </div>
</section>



